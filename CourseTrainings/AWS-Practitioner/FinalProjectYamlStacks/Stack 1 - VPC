AWSTemplateFormatVersion: '2010-09-09'
#-----------------Input of the CIDR of the VPC-------------------
Parameters:
  CIDR:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR for the VPC

Resources:
#-----------------Creating the VPC-------------------
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref CIDR
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
       - Key: Name
         Value: !Sub ${AWS::StackName}-VPC

  #-----------------Creating the Internet Gateway-------------------
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-IGW

  #-----------------Attaching the Internet Gateway to the VPC-------------------
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  #-----------------Creating the First Public Subnet-------------------
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 1, !Cidr [ !Ref CIDR , 5, 8 ] ]
      AvailabilityZone: !Select
                        - 0
                        - !GetAZs
                          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref VPC, "PublicSubnet1", !Select [0, !GetAZs ""], !Select [1, !Cidr [!Ref CIDR, 5, 8]]]]
  
  #-----------------Creating the First Private Subnet-------------------
  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 2, !Cidr [ !Ref CIDR , 5, 8 ] ]
      AvailabilityZone: !Select
                        - 0
                        - !GetAZs
                          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref VPC, "PrivateSubnet1", !Select [0, !GetAZs ""], !Select [2, !Cidr [!Ref CIDR, 5, 8]]]]

  #-----------------Creating the Second Public Subnet-------------------
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 3, !Cidr [ !Ref CIDR , 5, 8 ] ]
      AvailabilityZone: !Select
                        - 1
                        - !GetAZs
                          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref VPC, "PublicSubnet2", !Select [1, !GetAZs ""], !Select [3, !Cidr [!Ref CIDR, 5, 8]]]]
  
  #-----------------Creating the Second Private Subnet-------------------
  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 4, !Cidr [ !Ref CIDR , 5, 8 ] ]
      AvailabilityZone: !Select
                        - 1
                        - !GetAZs
                          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref VPC, "PrivateSubnet2", !Select [1, !GetAZs ""], !Select [4, !Cidr [!Ref CIDR, 5, 8]]]]

  #-----------------Creating the Public Route Table-------------------
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref VPC, "PublicRouteTable"]]

  #-----------------Creating the Private Route Table-------------------
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tage:
        - Key: Name
          Value: !Join ["-", [!Ref VPC, "PrivateRouteTable"]]
  
  #-----------------Creating the Public Route-------------------
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  #-----------------Associating the First Public Route Table with the Public Subnet-------------------
  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  #-----------------Associating the Second Public Route Table with the Public Subnet-------------------
  PublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  #-----------------Associating the First Private Route Table with the Private Subnet-------------------
  PrivateSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  #-----------------Associating the Second Private Route Table with the Private Subnet-------------------
  PrivateSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  #-----------------Create Public Network ACL-----------------------
  PublicMyNetworkAcl:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Allow All - NACL

  #--------------Create Inboud Rule for Public Network ACL----------------
  InboundRuleAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn: PublicMyNetworkAcl
    Properties:
      NetworkAclId: !Ref PublicMyNetworkAcl
      RuleNumber: 100
      Protocol: -1
      Egress: false
      RuleAction: allow
      CidrBlock: '0.0.0.0/0'

  #--------------Create Outbound Rule for Public Network ACL----------------
  OutboundRuleAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    DependsOn: PublicMyNetworkAcl
    Properties:
      NetworkAclId: !Ref PublicMyNetworkAcl
      RuleNumber: 100
      Protocol: -1  # All protocols
      Egress: true
      RuleAction: allow
      CidrBlock: '0.0.0.0/0'
  
  #-----------------Associating the Public Network ACL with the Public Subnet-------------------
  NaclPublicSubnet1Associatoin:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref PublicMyNetworkAcl 
      SubnetId: !Ref PublicSubnet1
  
  NaclPublicSubnet2Associatoin:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref PublicMyNetworkAcl 
      SubnetId: !Ref PublicSubnet2
  
  NaclPrivateSubnet1Associatoin:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref PublicMyNetworkAcl 
      SubnetId: !Ref PrivateSubnet1
  
  NaclPrivateSubnet2Associatoin:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref PublicMyNetworkAcl 
      SubnetId: !Ref PrivateSubnet2

  #-----------------Creating the Public Security Group-------------------
  PublicSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security group for HTTP, ICMP, SSH, TCP'
      VpcId: !Ref VPC
      SecurityGroupIngress:
          # Allows traffic from within your VPC
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: '10.0.0.0/16'
          # Allows ICMP from within your VPC
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: '10.0.0.0/16'
          # Allows SSH only from your laptop
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: '199.203.9.228/32'
          # Allows SSH only from your VPC
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: '10.0.0.0/16'
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSecurityGroup

#--------------------Outputs-------------------
Outputs:
  VPCName:
    Description: Name Of the VPC
    Value: !Ref VPC
    Export:
      Name: VPCName

  VPCId:
    Description: Id of the VPC
    Value: !GetAtt VPC.VpcId
    Export:
      Name: VPCId

  PublicSubnet1:
    Description: Public Subnet 1
    Value: !Ref PublicSubnet1
    Export:
      Name: PublicSubnet1

  PublicSubnet2:
    Description: Public Subnet 2
    Value: !Ref PublicSubnet2
    Export:
      Name: PublicSubnet2

  PrivateSubnet1:
    Description: Private Subnet 1
    Value: !Ref PrivateSubnet1
    Export:
      Name: PrivateSubnet1

  PrivateSubnet2:
    Description: Private Subnet 2
    Value: !Ref PrivateSubnet2
    Export:
      Name: PrivateSubnet2

  PublicSecurityGroup:
    Description: Public Security Group
    Value: !GetAtt PublicSecurityGroup.GroupId
    Export:
      Name: PublicSecurityGroup

  NetworkAcl:
    Description: Public Network ACL
    Value: !Ref PublicMyNetworkAcl
    Export:
      Name: Nacl-Allow-All

  AvailabilityZone1:
    Description: Availability Zone 1
    Value: !Select [0, !GetAZs ""]
    Export:
      Name: AvailabilityZone1

  AvailabilityZone2:
    Description: Availability Zone 2
    Value: !Select [1, !GetAZs ""]